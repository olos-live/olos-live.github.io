searchNodes=[{"doc":"This is the main client module. It provides the top-level functions to interact with the AgentHub application, like querying the state of agents, fetching list of agents and sending messages to an agent.","ref":"AgentHubClient.html","title":"AgentHubClient","type":"module"},{"doc":"Returns the number of agents on each voice state that has at least one agent, i.e., it won't include a state that has no agents in that state. Examples iex&gt; AgentHubClient . count_by_voice_state ( &quot;campaign1&quot; ) { :ok , %{ idle : 1 , talking : 1 } } iex&gt; AgentHubClient . count_by_voice_state ( &quot;inexistent&quot; ) { :ok , %{ } }","ref":"AgentHubClient.html#count_by_voice_state/1","title":"AgentHubClient.count_by_voice_state/1","type":"function"},{"doc":"Returns a list of all agents that are logged in, no matter the campaign.","ref":"AgentHubClient.html#get_all/0","title":"AgentHubClient.get_all/0","type":"function"},{"doc":"Returns a list of all the agents that are logged in a given campaign.","ref":"AgentHubClient.html#get_all_in_campaign/1","title":"AgentHubClient.get_all_in_campaign/1","type":"function"},{"doc":"Returns the state of the agent given its user ID.","ref":"AgentHubClient.html#get_by_user_id/1","title":"AgentHubClient.get_by_user_id/1","type":"function"},{"doc":"Defines the agent state record to be used when dealing with mnesia and the agent state struct to be used in all the rest of the application.","ref":"AgentHubClient.AgentState.html","title":"AgentHubClient.AgentState","type":"module"},{"doc":"","ref":"AgentHubClient.AgentState.html#agent_state/1","title":"AgentHubClient.AgentState.agent_state/1","type":"macro"},{"doc":"","ref":"AgentHubClient.AgentState.html#agent_state/2","title":"AgentHubClient.AgentState.agent_state/2","type":"macro"},{"doc":"","ref":"AgentHubClient.AgentState.html#attributes/0","title":"AgentHubClient.AgentState.attributes/0","type":"function"},{"doc":"","ref":"AgentHubClient.AgentState.html#record_to_struct/1","title":"AgentHubClient.AgentState.record_to_struct/1","type":"function"},{"doc":"A struct representing the state of an agent.","ref":"AgentHubClient.AgentState.html#t:agent_state/0","title":"AgentHubClient.AgentState.agent_state/0","type":"type"},{"doc":"An atom representing the state of a chat, like :idle or :chatting.","ref":"AgentHubClient.AgentState.html#t:chat_state/0","title":"AgentHubClient.AgentState.chat_state/0","type":"type"},{"doc":"An atom representing the state of voice, like :idle or :talking .","ref":"AgentHubClient.AgentState.html#t:voice_state/0","title":"AgentHubClient.AgentState.voice_state/0","type":"type"},{"doc":"Supervises the internal processes used by the client itself. Add it to your supervision tree (usually in application.ex ). Example: children = [ { AgentHubClient.Supervisor , replication : true } ] Supervisor . start_link ( children , strategy : :one_for_one ) The only available option is replication . When enabled, a copy of the mnesia table that holds agents state is kept locally in this node, so reading data is a local operation. If disabled, all access to the data is remote as the data is in the AgentHub node. Currently the internal processes that are supervised are mnesia and libcluster, where the libcluster process is only started if the node is started with a name, i.e, if it is started expecting it to be in a cluster and not standalone.","ref":"AgentHubClient.Supervisor.html","title":"AgentHubClient.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"AgentHubClient.Supervisor.html#child_spec/1","title":"AgentHubClient.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"AgentHubClient.Supervisor.html#start_link/1","title":"AgentHubClient.Supervisor.start_link/1","type":"function"},{"doc":"AgentHub Client The AgentHub Client is an Elixir library that provides access to the AgentHub application. You add it as a dependency in your Elixir application and get access to all the funcionalities provided by the AgentHub, like fetching a list of agents in certain state or getting only the total, sending text messages to an agent and so on. The standard documentation is available online here: https://olos-live.github.io/agenthub-client","ref":"readme.html","title":"AgentHub Client","type":"extras"},{"doc":"Add it as a dependency in yout mix.exs file. You must have ssh access to the repository in the Olos' GitLab. defp deps do [ { :agenthub_client , git : &quot;git@olosprdspogit03:olos-live/agenthub-client.git&quot; , branch : &quot;master&quot; } ] end Add it to your supervision tree (usually in application.ex ). children = [ { AgentHubClient.Supervisor , replication : true } ] Supervisor . start_link ( children , strategy : :one_for_one ) Then you can invoke functions provided by the AgentHubClient module. Example: def some_dialer_function do agents = AgentHubClient . get_talking ( &quot;campaign11&quot; ) # do something with the agents end","ref":"readme.html#using-it","title":"AgentHub Client - Using it","type":"extras"},{"doc":"Currently the only option you have when starting this module is the replication . The default value is false . If you set it to true then the client will keep a local copy of the agents state table in its memory, which improves the performance of reads at the expenses of the performance of writes.","ref":"readme.html#configuring-it","title":"AgentHub Client - Configuring it","type":"extras"},{"doc":"If you simply start your application like you usually do, without a name, you will be starting with an empty local in-memory store, with no agents logged in: iex -S mix In this case you can call the insert/2 function multiple times in your tests to to add some agents to the list so you can test your business logic. If you want your application to access data from an actual instance of the AgentHub that is running in your laptop, start your application with a name. Example: iex --name dialer@127.0.0.1 -S mix It will automatically connect to one or more instances of AgentHub under the names of agenthub1@127.0.0.1 and agenthub2@127.0.0.1 . If they are not running, your application will start like in the first case, i.e., with an empty list of agents, with some warnings about not being able to connect to those nodes. You can safely ignore them.","ref":"readme.html#starting-your-application","title":"AgentHub Client - Starting your application","type":"extras"},{"doc":"If you have added this library to your project by following the example above, you will be using the latest stable version, which corresponds to the master branch. Attention : during development, execute mix deps.update agenthub_client everytime you want to update your local copy of the latest stable version of this library. It won't happen automatically for you. If instead of the latest stable release you want to run with a specific tag, simply edit your mix.exs file replacing the branch attribute by tag and informing the version you want. Example: defp deps do [ { :agenthub_client , git : &quot;git@olosprdspogit03:olos-live/agenthub-client.git&quot; , tag : &quot;v1.3.0&quot; } ] end","ref":"readme.html#which-version","title":"AgentHub Client - Which version?","type":"extras"},{"doc":"In production, you will be starting your application with an actual IP address instead of 127.0.0.1 . In that case, this module will automatically try to connect to the applications that you inform in the environment variable named AGENTHUB_CLIENT_SERVICES . Example: AGENTHUB_CLIENT_SERVICES=agenthub, dialer, linker The application names are actually kubernetes services names. If you do not set this environment variable, it is assumed agenthub .","ref":"readme.html#using-it-in-production","title":"AgentHub Client - Using it in production","type":"extras"},{"doc":"If you are working on this project, before publishing this library, please remember to: Run mix test to make sure tests are still passing Increment the version in mix.exs Commit and push to the repo Update the documentation: Checkout the Olos Live documentation project (only once): git clone git@github.com:olos-live/olos-live.github.io.git Set the environment variable OLOS_LIVE_DOCS_PATH with the path to that project (only once): export OLOS_LIVE_DOCS_PATH=/home/yourname/projects/olos-live/olos-live.github.io/ Run ./publish_docs.sh Access https://olos-live.github.io/agenthub-client/ to verify it. Please notice it takes some time to the CDN to invalidate the cache, so you might still see the previous version. To force the cache to be missed, append something to the URL like ?version=1","ref":"readme.html#contributing","title":"AgentHub Client - Contributing","type":"extras"}]