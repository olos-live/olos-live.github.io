searchNodes=[{"doc":"This is the main client module. It provides the top-level functions to interact with the AgentHub application, like querying the state of agents, fetching list of agents and sending messages to an agent.","ref":"AgentHubClient.html","title":"AgentHubClient","type":"module"},{"doc":"Returns the number of agents of the given campaign grouped by voice state. Examples iex&gt; AgentHubClient . count_agents_in_campaign ( &quot;campaign1&quot; ) { :ok , %{ idle : 1 , talking : 1 } } iex&gt; AgentHubClient . count_agents_in_campaign ( &quot;inexistent&quot; ) { :error , :campaign_not_found }","ref":"AgentHubClient.html#count_agents_in_campaign/1","title":"AgentHubClient.count_agents_in_campaign/1","type":"function"},{"doc":"Returns a list of all agents that are logged in, no matter the campaign.","ref":"AgentHubClient.html#get_all/0","title":"AgentHubClient.get_all/0","type":"function"},{"doc":"Returns a list of all the agents that are logged in a given campaign.","ref":"AgentHubClient.html#get_all_in_campaign/1","title":"AgentHubClient.get_all_in_campaign/1","type":"function"},{"doc":"Returns the state of the agent given its user ID.","ref":"AgentHubClient.html#get_by_user_id/1","title":"AgentHubClient.get_by_user_id/1","type":"function"},{"doc":"Returns the agent that is idle for voice for the longest time in a given campaign. Example: iex&gt; AgentHubClient . most_idle_agent_in_campaign ( &quot;2&quot; ) { :ok , % AgentHubClient.AgentState { chat_state : :idle , chat_state_since : ~U[2021-11-23 12:26:32.111511Z] , inserted_at : ~U[2021-11-23 12:26:32.111511Z] , next_chat_state : nil , next_voice_state : nil , online_since : nil , offline_since : ~U[2021-11-23 12:26:32.111511Z] , pause_code : nil , updated_at : ~U[2021-11-23 12:26:32.111563Z] , user_id : &quot;S268CtruX6MG6mpmTjZ9ZU&quot; , user_name : &quot;Mrs. Selena Parisian&quot; , voice_state : :idle , voice_state_since : ~U[2021-11-23 12:26:32.111563Z] } }","ref":"AgentHubClient.html#most_idle_agent_in_campaign/1","title":"AgentHubClient.most_idle_agent_in_campaign/1","type":"function"},{"doc":"Defines the agent state record to be used when dealing with mnesia and the agent state struct to be used in all the rest of the application.","ref":"AgentHubClient.AgentState.html","title":"AgentHubClient.AgentState","type":"module"},{"doc":"","ref":"AgentHubClient.AgentState.html#agent_state/1","title":"AgentHubClient.AgentState.agent_state/1","type":"macro"},{"doc":"","ref":"AgentHubClient.AgentState.html#agent_state/2","title":"AgentHubClient.AgentState.agent_state/2","type":"macro"},{"doc":"The list of attributes. Used when creating Mnesia tables. See t/0 .","ref":"AgentHubClient.AgentState.html#attributes/0","title":"AgentHubClient.AgentState.attributes/0","type":"function"},{"doc":"Creates an AgentState struct from a record.","ref":"AgentHubClient.AgentState.html#from_record/1","title":"AgentHubClient.AgentState.from_record/1","type":"function"},{"doc":"Returns a list of AgentState structs from a list of records.","ref":"AgentHubClient.AgentState.html#from_records/1","title":"AgentHubClient.AgentState.from_records/1","type":"function"},{"doc":"The tuple for matching all agents in Mnesia","ref":"AgentHubClient.AgentState.html#mnesia_match_all/0","title":"AgentHubClient.AgentState.mnesia_match_all/0","type":"function"},{"doc":"The tuple for matching offline agents in Mnesia","ref":"AgentHubClient.AgentState.html#mnesia_match_offline/0","title":"AgentHubClient.AgentState.mnesia_match_offline/0","type":"function"},{"doc":"The list of voice states. Used to expose this enumeration to external modules.","ref":"AgentHubClient.AgentState.html#voice_states/0","title":"AgentHubClient.AgentState.voice_states/0","type":"function"},{"doc":"An atom representing the agent's state related to chat operations.","ref":"AgentHubClient.AgentState.html#t:chat_state/0","title":"AgentHubClient.AgentState.chat_state/0","type":"type"},{"doc":"A struct representing the state of an agent.","ref":"AgentHubClient.AgentState.html#t:t/0","title":"AgentHubClient.AgentState.t/0","type":"type"},{"doc":"An atom representing the agent's state related to voice operations.","ref":"AgentHubClient.AgentState.html#t:voice_state/0","title":"AgentHubClient.AgentState.voice_state/0","type":"type"},{"doc":"Defines the campaign record to be used when dealing with mnesia and the campaign struct to be used in all the rest of the application.","ref":"AgentHubClient.Campaign.html","title":"AgentHubClient.Campaign","type":"module"},{"doc":"","ref":"AgentHubClient.Campaign.html#attributes/0","title":"AgentHubClient.Campaign.attributes/0","type":"function"},{"doc":"","ref":"AgentHubClient.Campaign.html#campaign/1","title":"AgentHubClient.Campaign.campaign/1","type":"macro"},{"doc":"","ref":"AgentHubClient.Campaign.html#campaign/2","title":"AgentHubClient.Campaign.campaign/2","type":"macro"},{"doc":"","ref":"AgentHubClient.Campaign.html#from_map/1","title":"AgentHubClient.Campaign.from_map/1","type":"function"},{"doc":"","ref":"AgentHubClient.Campaign.html#from_record/1","title":"AgentHubClient.Campaign.from_record/1","type":"function"},{"doc":"","ref":"AgentHubClient.Campaign.html#mnesia_match_all/0","title":"AgentHubClient.Campaign.mnesia_match_all/0","type":"function"},{"doc":"An atom representing the campaign's status.","ref":"AgentHubClient.Campaign.html#t:campaign_status/0","title":"AgentHubClient.Campaign.campaign_status/0","type":"type"},{"doc":"A struct representing a campaign.","ref":"AgentHubClient.Campaign.html#t:t/0","title":"AgentHubClient.Campaign.t/0","type":"type"},{"doc":"Tries to put the agent in the idle state. If the user is in pause, he goes idle both on voice and chat. If the user is not in pause but has a pause enqueued, then the pause is dequeued. Otherwise an error is returned and nothing is changed.","ref":"AgentHubClient.Mnesia.AgentState.Idle.html","title":"AgentHubClient.Mnesia.AgentState.Idle","type":"module"},{"doc":"","ref":"AgentHubClient.Mnesia.AgentState.Idle.html#idle/1","title":"AgentHubClient.Mnesia.AgentState.Idle.idle/1","type":"function"},{"doc":"Tries to put the agent in a pause state. If the agent is currently idle on voice and chat then he enters in pause immediatelly, both in voice and chat. If the agent is already in pause, replace the pause by the new one. If the agent is already in the same pause or has the same pause already enqueued, then returns an error. If the agent is not idle nor paused, then the pause is enqueued.","ref":"AgentHubClient.Mnesia.AgentState.Pause.html","title":"AgentHubClient.Mnesia.AgentState.Pause","type":"module"},{"doc":"","ref":"AgentHubClient.Mnesia.AgentState.Pause.html#pause/2","title":"AgentHubClient.Mnesia.AgentState.Pause.pause/2","type":"function"},{"doc":"Supervises the internal processes used by the client itself (mnesia and libcluster). Add it to your supervision tree (usually in application.ex ). Example: children = [ { AgentHubClient.Supervisor , standalone : false , k8s_services : [ &quot;agenthub&quot; , &quot;dialer&quot; ] , replication : true } ] Supervisor . start_link ( children , strategy : :one_for_one ) All parameters are optional: standalone : defaults to false , which means it will try to connect to remote nodes to form a cluster. Set it to true for running it in standalone mode, i.e., without connecting to any other node. k8s_services : list of kubernetes services that are part of the cluster. It defaults to [&quot;agenthub&quot;] , but it is ignored if running in standalone mode. Leave it blank if running multiple instances in a single node without kubernetes. In that case, different instances in the same host will see each other automatically. For production, add all the services that shall share data. Imagine we add only agenthub to this list and we have all the applications up and running. Then we restart the AgentHub. When it starts, it won't try to connect to the other applications, so it will start with a new empty table, while the dialer for instance might have a copy of the original table with data in it that we could use. If we add the dialer (and the other applications) here, then when the AgentHub starts, it will start connected to the dialer for instance and will join the cluster, copying the tables instead of creating new ones. replication : set it to true to have a copy of the mnesia tables locally in this node, so reading data will be a local operation. If set to false , all access to the data will be remote as the data will be in the remote nodes only.","ref":"AgentHubClient.Supervisor.html","title":"AgentHubClient.Supervisor","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"AgentHubClient.Supervisor.html#child_spec/1","title":"AgentHubClient.Supervisor.child_spec/1","type":"function"},{"doc":"","ref":"AgentHubClient.Supervisor.html#start_link/1","title":"AgentHubClient.Supervisor.start_link/1","type":"function"},{"doc":"AgentHub Client The AgentHub Client is an Elixir library that provides access to the AgentHub application. You add it as a dependency in your Elixir application and get access to all the funcionalities provided by the AgentHub, like fetching a list of agents in certain state or getting only the total, sending text messages to an agent and so on. The standard documentation is available online here: https://olos-live.github.io/agenthub-client","ref":"readme.html","title":"AgentHub Client","type":"extras"},{"doc":"Add it as a dependency in yout mix.exs file. You must have ssh access to the repository in the Olos' GitLab. defp deps do [ { :agenthub_client , git : &quot;git@olosprdspogit03:olos-live/agenthub-client.git&quot; , branch : &quot;master&quot; } ] end Add AgentHubClient.Supervisor to your supervision tree (usually in application.ex ). children = [ { AgentHubClient.Supervisor } ] Supervisor . start_link ( children , strategy : :one_for_one ) Then you can invoke functions provided by the AgentHubClient module. Example: def some_dialer_function do agents = AgentHubClient . get_all_in_campaign ( &quot;campaign11&quot; ) # do something with the agents end","ref":"readme.html#using-it","title":"AgentHub Client - Using it","type":"extras"},{"doc":"If you simply start your application like you usually do, without a name, you will be starting with an empty local in-memory store, with no agents and no campaigns: iex -S mix In this case you can call the functions provided by the AgentHubClient.Store module to add some agents and/or campaigns so you can test your business logic. Please remember to set the standalone option to true . If you want your application to access data from an actual instance of the AgentHub that is running in your laptop, set the standalone option to false and start your application with a name. Example: iex --name dialer@192.168.0.17 -S mix It will automatically connect to all instances of AgentHub that are running in your local host.","ref":"readme.html#starting-your-application","title":"AgentHub Client - Starting your application","type":"extras"},{"doc":"If you have added this library to your project by following the example above, you will be using the latest stable version, which corresponds to the master branch. Attention : during development, execute mix deps.update agenthub_client everytime you want to update your local copy of the latest stable version of this library. It won't happen automatically for you. If instead of the latest stable release you want to run with a specific tag, simply edit your mix.exs file replacing the branch attribute by tag and informing the version you want. Example: defp deps do [ { :agenthub_client , git : &quot;git@olosprdspogit03:olos-live/agenthub-client.git&quot; , tag : &quot;v1.3.0&quot; } ] end","ref":"readme.html#which-version","title":"AgentHub Client - Which version?","type":"extras"},{"doc":"If you are working on this project, before publishing this library, please remember to: Increment the version in mix.exs Run mix test to make sure existing tests are still passing Benchmark tests take longer to run. To skip them use mix test --exclude benchmark Create new tests to cover new code you have added Check the test coverage using mix coveralls.html --exclude benchmark Commit and push to the repo Update the documentation: Checkout the Olos Live documentation project (only once): git clone git@github.com:olos-live/olos-live.github.io.git Set the environment variable OLOS_LIVE_DOCS_PATH with the path to that project (only once): export OLOS_LIVE_DOCS_PATH=/home/yourname/projects/olos-live/olos-live.github.io/ Run ./publish_docs.sh Access https://olos-live.github.io/agenthub-client/ to verify it. Please notice it takes some time to the CDN to invalidate the cache, so you might still see the previous version. To force the cache to be missed, append something to the URL like ?version=1","ref":"readme.html#contributing","title":"AgentHub Client - Contributing","type":"extras"}]